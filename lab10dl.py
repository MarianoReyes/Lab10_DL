# -*- coding: utf-8 -*-
"""lab10dl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RLpjDSnJCWxdO3VD5f4irReG26LK9aoS

1. Librerías
"""

# !pip install gym
# !pip install numpy
# !pip install torch

"""2. Entorno de CartPole"""

import gym
import torch
import torch.nn as nn

env = gym.make('CartPole-v1', render_mode='human')

"""3. Definición de las Redes en Línea y de Destino"""



class QNetwork(nn.Module):
    def __init__(self, input_size, output_size):
        super(QNetwork, self).__init__()
        self.fc1 = nn.Linear(input_size, 64)
        self.fc2 = nn.Linear(64, 32)
        self.fc3 = nn.Linear(32, output_size)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# Inicializa la red en línea y la red de destino
input_size = env.observation_space.shape[0]
output_size = env.action_space.n
online_network = QNetwork(input_size, output_size)
target_network = QNetwork(input_size, output_size)
target_network.load_state_dict(online_network.state_dict())

"""4. Establecimiento de Hiperparámetros"""

num_episodes = 100
batch_size = 64
gamma = 0.99
epsilon = 1.0
epsilon_decay =  0.995
epsilon_min = 0.01
target_update_frequency = 10

"""5. Selección de Acciones Épsilon-Greedy"""

import random

def select_action(state, epsilon):
    if random.random() < epsilon:
        return env.action_space.sample()  # Exploración aleatoria
    else:
        with torch.no_grad():
            q_values = online_network(torch.tensor(state, dtype=torch.float32))
            return q_values.argmax().item()

"""6. Reproducción de la Experiencia (Experience Replay)"""

from collections import deque
import random

class ExperienceReplay:
    def __init__(self, capacity):
        self.buffer = deque(maxlen=capacity)

    def add(self, experience):
        self.buffer.append(experience)

    def sample(self, batch_size):
        return random.sample(self.buffer, batch_size)

"""7. Ciclo de Entrenamiento y 8. Representar el entorno"""

import torch.optim as optim

# Define el optimizador (por ejemplo, Adam)
learning_rate = 0.001
optimizer = optim.Adam(online_network.parameters(), lr=learning_rate)

experience_replay = ExperienceReplay(capacity=10000)

rewards_list = []  # Almacena las recompensas totales por episodio

for episode in range(num_episodes):
    state = env.reset()
    done = False
    total_reward = 0

    while not done:
        action = select_action(state, epsilon)
        next_state, reward, done, _ = env.step(action)
        experience_replay.add((state, action, reward, next_state, done))

        # Renderiza el entorno para ver el progreso
        env.render()

        state = next_state
        total_reward += reward

        if len(experience_replay.buffer) > batch_size:
            # Realiza el entrenamiento con experience replay aquí
            batch = experience_replay.sample(batch_size)
            states, actions, rewards, next_states, dones = zip(*batch)

            states = torch.tensor(states, dtype=torch.float32)
            actions = torch.tensor(actions)
            rewards = torch.tensor(rewards, dtype=torch.float32)
            next_states = torch.tensor(next_states, dtype=torch.float32)
            dones = torch.tensor(dones, dtype=torch.float32)

            online_q_values = online_network(states)
            target_q_values = target_network(next_states)

            # Calcula la función de pérdida, por ejemplo, con error cuadrático medio
            q_value_targets = rewards + gamma * target_q_values.max(dim=1).values * (1 - dones)
            q_value_expected = online_q_values.gather(1, actions.unsqueeze(1))

            loss = torch.nn.MSELoss()(q_value_expected, q_value_targets.unsqueeze(1))

            # Realiza la retropropagación y actualización de la red en línea
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

    rewards_list.append(total_reward)  # Registra la recompensa total de este episodio

    if episode % target_update_frequency == 0:
        # Actualiza la red de destino con los pesos de la red en línea
        target_network.load_state_dict(online_network.state_dict())

    # Actualiza epsilon (exploración) decay
    epsilon = max(epsilon_min, epsilon * epsilon_decay)

# Cierre del entorno
env.close()

"""9. Supervisar el Entrenamiento"""

import matplotlib.pyplot as plt

# Traza un gráfico de recompensas a lo largo de los episodios
plt.plot(range(num_episodes), rewards_list)
plt.xlabel('Episodio')
plt.ylabel('Recompensa Total')
plt.title('Progreso del Entrenamiento')
plt.show()

"""10. Evaluar el rendimiento"""

test_episodes = 10  # Número de episodios de prueba

for episode in range(test_episodes):
    state = env.reset()
    done = False
    total_reward = 0

    while not done:
        action = select_action(state, epsilon)  # Usar epsilon=0 para explotación
        state, reward, done, _ = env.step(action)
        total_reward += reward

    print(f'Episodio {episode + 1}: Recompensa Total = {total_reward}')